
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftorleftandrightnotrightinrightisrightassignrightincrementdecrementself_productself_divisionself_integer_divisionself_moduleself_powerleftequalsnon_equalleftlessgreaterless_equalgreater_equalleftplusminusleftproductdivisioninteger_divisionmoduleleftpowerleftleft_parenthesisright_parenthesisFalse None True __peg_parser__ and as assert assign async at await backspace break class colon comma continue decrement def del division elif else equals except finally float for from global greater greater_equal identation identifier if import in increment integer integer_division is lambda left_brace left_bracket left_parenthesis less less_equal minus module newline non_equal nonlocal not or pass period plus power product raise return right_brace right_bracket right_parenthesis self_division self_integer_division self_module self_power self_product semicolon string try while with yieldprogram : statement_liststatement : block_statementblock_statement : header newline inner_statement_list backspaceblock_statement : header newline inner_statement_listblock_statement : emptyheader : defined_functionheader : conditional_statementheader : repetitive_statementdefined_function : def identifier left_parenthesis parameter right_parenthesis colonparameter : identifierparameter : parameter comma identifierparameter : emptyconditional_statement : if boolean_expression colonconditional_statement : if boolean colonconditional_statement : elif boolean_expression colonconditional_statement : elif boolean colonconditional_statement : else colonrepetitive_statement : for identifier in identifier colonrepetitive_statement : while boolean_expression colonrepetitive_statement : while boolean coloninner_statement_list : inner_statement newlineinner_statement_list : inner_statementinner_statement_list : inner_statement_list inner_statement newlineinner_statement_list : inner_statement_list inner_statementinner_statement : identation statementinner_statement : identation inner_statementstatement_list : statement newlinestatement_list : statementstatement_list : statement_list statement newlinestatement_list : statement_list statementstatement_list : emptystatement : assign_valueassign_value : identifier assign_operator valueassign_operator : assignassign_operator : updateupdate : incrementupdate : decrementupdate : self_productupdate : self_divisionupdate : self_integer_divisionupdate : self_moduleupdate : self_powervalue : numbernumber : floatnumber : integernumber : identifiervalue : booleanboolean : Trueboolean : Falseboolean : identifiervalue : texttext : stringtext : formatted_stringtext : identifierformatted_string : text module left_parenthesis element right_parenthesisvalue : expressionexpression : arithmetic_expressionarithmetic_expression : number arithmetic_operator numberarithmetic_expression : arithmetic_expression arithmetic_operator numberarithmetic_operator : plusarithmetic_operator : minusarithmetic_operator : productarithmetic_operator : divisionarithmetic_operator : integer_divisionarithmetic_operator : modulearithmetic_operator : powerexpression : boolean_expressionboolean_expression : number relational_operator numberboolean_expression : arithmetic_expression relational_operator numberboolean_expression : number relational_operator arithmetic_expressionboolean_expression : arithmetic_expression relational_operator arithmetic_expressionboolean_expression : boolean boolean_operator booleanboolean_expression : not booleanboolean_expression : not boolean_expressionboolean_expression : boolean_expression boolean_operator booleanboolean_expression : boolean_expression relational_operator numberboolean_expression : boolean_expression relational_operator arithmetic_expressionrelational_operator : equalsrelational_operator : non_equalrelational_operator : lessrelational_operator : greaterrelational_operator : less_equalrelational_operator : greater_equalboolean_operator : andboolean_operator : orexpression : string_concatenationstring_concatenation : text plus textstring_concatenation : string_concatenation plus textvalue : listvalue : function_callvalue : Nonelist : left_bracket element right_bracketelement : valueelement : element comma valuestatement : function_callfunction_call : identifier left_parenthesis argument right_parenthesisargument : valueargument : argument comma valueargument : emptystatement : return valuestatement : breakempty :'
    
_lr_action_items = {'return':([0,2,3,4,5,6,7,9,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,61,68,96,97,98,99,100,101,113,114,115,116,117,118,120,121,122,123,124,125,126,127,128,129,131,132,133,134,135,136,144,149,],[8,8,-28,-5,-2,-32,-95,-101,-30,-5,-27,-100,-43,-47,-51,-56,-89,-90,-91,-44,-45,-46,-48,-49,-52,-53,-57,-67,-86,-50,-29,-73,-74,-4,-22,8,-33,-58,-46,-68,-70,-72,-50,-87,-54,-59,-71,-69,-75,-76,-77,-88,-92,-3,-24,-21,-25,-26,-96,-23,-55,]),'break':([0,2,3,4,5,6,7,9,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,61,68,96,97,98,99,100,101,113,114,115,116,117,118,120,121,122,123,124,125,126,127,128,129,131,132,133,134,135,136,144,149,],[9,9,-28,-5,-2,-32,-95,-101,-30,-5,-27,-100,-43,-47,-51,-56,-89,-90,-91,-44,-45,-46,-48,-49,-52,-53,-57,-67,-86,-50,-29,-73,-74,-4,-22,9,-33,-58,-46,-68,-70,-72,-50,-87,-54,-59,-71,-69,-75,-76,-77,-88,-92,-3,-24,-21,-25,-26,-96,-23,-55,]),'identifier':([0,2,3,4,5,6,7,8,9,15,16,17,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,45,46,47,48,49,50,51,52,53,54,55,61,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,88,89,90,91,92,93,96,97,98,99,100,101,105,110,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,144,147,149,],[11,11,-28,-5,-2,-32,-95,34,-101,56,61,61,65,61,-30,-5,-27,-100,-43,-47,-51,-56,-89,-90,-91,-44,-45,-46,-48,-49,-52,-53,-57,-67,-86,34,61,34,34,-34,-35,-36,-37,-38,-39,-40,-41,-42,-50,-29,114,114,-60,-61,-62,-63,-64,-65,-66,-78,-79,-80,-81,-82,-83,118,-84,-85,121,114,114,118,114,121,-73,-74,-4,-22,11,-33,138,141,-58,-46,-68,-70,-72,-50,34,-87,-54,-59,-71,-69,-75,-76,-77,-88,-92,34,-3,-24,-21,-25,-26,-96,34,-23,151,-55,]),'def':([0,2,3,4,5,6,7,9,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,61,68,96,97,98,99,100,101,113,114,115,116,117,118,120,121,122,123,124,125,126,127,128,129,131,132,133,134,135,136,144,149,],[15,15,-28,-5,-2,-32,-95,-101,-30,-5,-27,-100,-43,-47,-51,-56,-89,-90,-91,-44,-45,-46,-48,-49,-52,-53,-57,-67,-86,-50,-29,-73,-74,-4,-22,15,-33,-58,-46,-68,-70,-72,-50,-87,-54,-59,-71,-69,-75,-76,-77,-88,-92,-3,-24,-21,-25,-26,-96,-23,-55,]),'if':([0,2,3,4,5,6,7,9,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,61,68,96,97,98,99,100,101,113,114,115,116,117,118,120,121,122,123,124,125,126,127,128,129,131,132,133,134,135,136,144,149,],[16,16,-28,-5,-2,-32,-95,-101,-30,-5,-27,-100,-43,-47,-51,-56,-89,-90,-91,-44,-45,-46,-48,-49,-52,-53,-57,-67,-86,-50,-29,-73,-74,-4,-22,16,-33,-58,-46,-68,-70,-72,-50,-87,-54,-59,-71,-69,-75,-76,-77,-88,-92,-3,-24,-21,-25,-26,-96,-23,-55,]),'elif':([0,2,3,4,5,6,7,9,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,61,68,96,97,98,99,100,101,113,114,115,116,117,118,120,121,122,123,124,125,126,127,128,129,131,132,133,134,135,136,144,149,],[17,17,-28,-5,-2,-32,-95,-101,-30,-5,-27,-100,-43,-47,-51,-56,-89,-90,-91,-44,-45,-46,-48,-49,-52,-53,-57,-67,-86,-50,-29,-73,-74,-4,-22,17,-33,-58,-46,-68,-70,-72,-50,-87,-54,-59,-71,-69,-75,-76,-77,-88,-92,-3,-24,-21,-25,-26,-96,-23,-55,]),'else':([0,2,3,4,5,6,7,9,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,61,68,96,97,98,99,100,101,113,114,115,116,117,118,120,121,122,123,124,125,126,127,128,129,131,132,133,134,135,136,144,149,],[18,18,-28,-5,-2,-32,-95,-101,-30,-5,-27,-100,-43,-47,-51,-56,-89,-90,-91,-44,-45,-46,-48,-49,-52,-53,-57,-67,-86,-50,-29,-73,-74,-4,-22,18,-33,-58,-46,-68,-70,-72,-50,-87,-54,-59,-71,-69,-75,-76,-77,-88,-92,-3,-24,-21,-25,-26,-96,-23,-55,]),'for':([0,2,3,4,5,6,7,9,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,61,68,96,97,98,99,100,101,113,114,115,116,117,118,120,121,122,123,124,125,126,127,128,129,131,132,133,134,135,136,144,149,],[19,19,-28,-5,-2,-32,-95,-101,-30,-5,-27,-100,-43,-47,-51,-56,-89,-90,-91,-44,-45,-46,-48,-49,-52,-53,-57,-67,-86,-50,-29,-73,-74,-4,-22,19,-33,-58,-46,-68,-70,-72,-50,-87,-54,-59,-71,-69,-75,-76,-77,-88,-92,-3,-24,-21,-25,-26,-96,-23,-55,]),'while':([0,2,3,4,5,6,7,9,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,61,68,96,97,98,99,100,101,113,114,115,116,117,118,120,121,122,123,124,125,126,127,128,129,131,132,133,134,135,136,144,149,],[20,20,-28,-5,-2,-32,-95,-101,-30,-5,-27,-100,-43,-47,-51,-56,-89,-90,-91,-44,-45,-46,-48,-49,-52,-53,-57,-67,-86,-50,-29,-73,-74,-4,-22,20,-33,-58,-46,-68,-70,-72,-50,-87,-54,-59,-71,-69,-75,-76,-77,-88,-92,-3,-24,-21,-25,-26,-96,-23,-55,]),'newline':([0,2,3,4,5,6,7,9,10,12,13,14,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,61,64,68,96,97,98,99,100,101,106,107,108,109,111,112,113,114,115,116,117,118,120,121,122,123,124,125,126,127,128,129,131,132,133,134,135,136,144,148,149,150,],[-102,-102,23,-5,-2,-32,-95,-101,44,-6,-7,-8,68,-5,-27,-100,-43,-47,-51,-56,-89,-90,-91,-44,-45,-46,-48,-49,-52,-53,-57,-67,-86,-50,-17,-29,-73,-74,-4,133,-102,-33,-13,-14,-15,-16,-19,-20,-58,-46,-68,-70,-72,-50,-87,-54,-59,-71,-69,-75,-76,-77,-88,-92,-3,144,-21,-25,-26,-96,-23,-18,-55,-9,]),'$end':([0,1,2,3,4,5,6,7,9,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,61,68,96,97,98,99,100,101,113,114,115,116,117,118,120,121,122,123,124,125,126,127,128,129,131,132,133,134,135,136,144,149,],[-102,0,-1,-28,-5,-2,-32,-95,-101,-30,-5,-27,-100,-43,-47,-51,-56,-89,-90,-91,-44,-45,-46,-48,-49,-52,-53,-57,-67,-86,-50,-29,-73,-74,-4,-22,-102,-33,-58,-46,-68,-70,-72,-50,-87,-54,-59,-71,-69,-75,-76,-77,-88,-92,-3,-24,-21,-25,-26,-96,-23,-55,]),'backspace':([5,6,7,9,22,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,61,96,97,98,99,100,101,113,114,115,116,117,118,120,121,122,123,124,125,126,127,128,129,131,132,133,134,135,136,144,149,],[-2,-32,-95,-101,-5,-100,-43,-47,-51,-56,-89,-90,-91,-44,-45,-46,-48,-49,-52,-53,-57,-67,-86,-50,-73,-74,131,-22,-102,-33,-58,-46,-68,-70,-72,-50,-87,-54,-59,-71,-69,-75,-76,-77,-88,-92,-3,-24,-21,-25,-26,-96,-23,-55,]),'identation':([5,6,7,9,22,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,44,61,96,97,98,99,100,101,113,114,115,116,117,118,120,121,122,123,124,125,126,127,128,129,131,132,133,134,135,136,144,149,],[-2,-32,-95,-101,-5,-100,-43,-47,-51,-56,-89,-90,-91,-44,-45,-46,-48,-49,-52,-53,-57,-67,-86,100,-50,-73,-74,100,-22,100,-33,-58,-46,-68,-70,-72,-50,-87,-54,-59,-71,-69,-75,-76,-77,-88,-92,-3,-24,-21,-25,-26,-96,-23,-55,]),'None':([8,42,45,46,47,48,49,50,51,52,53,54,55,119,130,137,],[31,31,31,31,-34,-35,-36,-37,-38,-39,-40,-41,-42,31,31,31,]),'float':([8,16,17,20,42,43,45,46,47,48,49,50,51,52,53,54,55,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,89,90,92,119,130,137,],[32,32,32,32,32,32,32,32,-34,-35,-36,-37,-38,-39,-40,-41,-42,32,32,-60,-61,-62,-63,-64,-65,-66,-78,-79,-80,-81,-82,-83,32,32,32,32,32,32,]),'integer':([8,16,17,20,42,43,45,46,47,48,49,50,51,52,53,54,55,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,89,90,92,119,130,137,],[33,33,33,33,33,33,33,33,-34,-35,-36,-37,-38,-39,-40,-41,-42,33,33,-60,-61,-62,-63,-64,-65,-66,-78,-79,-80,-81,-82,-83,33,33,33,33,33,33,]),'True':([8,16,17,20,42,43,45,46,47,48,49,50,51,52,53,54,55,84,85,86,91,119,130,137,],[35,35,35,35,35,35,35,35,-34,-35,-36,-37,-38,-39,-40,-41,-42,35,-84,-85,35,35,35,35,]),'False':([8,16,17,20,42,43,45,46,47,48,49,50,51,52,53,54,55,84,85,86,91,119,130,137,],[36,36,36,36,36,36,36,36,-34,-35,-36,-37,-38,-39,-40,-41,-42,36,-84,-85,36,36,36,36,]),'string':([8,42,45,46,47,48,49,50,51,52,53,54,55,88,93,119,130,137,],[37,37,37,37,-34,-35,-36,-37,-38,-39,-40,-41,-42,37,37,37,37,37,]),'left_bracket':([8,42,45,46,47,48,49,50,51,52,53,54,55,119,130,137,],[42,42,42,42,-34,-35,-36,-37,-38,-39,-40,-41,-42,42,42,42,]),'not':([8,16,17,20,42,43,45,46,47,48,49,50,51,52,53,54,55,119,130,137,],[43,43,43,43,43,43,43,43,-34,-35,-36,-37,-38,-39,-40,-41,-42,43,43,43,]),'left_parenthesis':([11,34,56,87,],[46,46,105,119,]),'assign':([11,],[47,]),'increment':([11,],[49,]),'decrement':([11,],[50,]),'self_product':([11,],[51,]),'self_division':([11,],[52,]),'self_integer_division':([11,],[53,]),'self_module':([11,],[54,]),'self_power':([11,],[55,]),'colon':([18,32,33,35,36,57,58,61,62,63,66,67,96,97,113,114,115,116,117,118,122,123,124,125,126,127,141,146,],[64,-44,-45,-48,-49,106,107,-50,108,109,111,112,-73,-74,-58,-46,-68,-70,-72,-50,-59,-71,-69,-75,-76,-77,148,150,]),'right_bracket':([25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,61,94,95,96,97,113,114,115,116,117,118,120,121,122,123,124,125,126,127,128,129,136,143,149,],[-43,-47,-51,-56,-89,-90,-91,-44,-45,-46,-48,-49,-52,-53,-57,-67,-86,-50,129,-93,-73,-74,-58,-46,-68,-70,-72,-50,-87,-54,-59,-71,-69,-75,-76,-77,-88,-92,-96,-94,-55,]),'comma':([25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,46,61,94,95,96,97,102,103,104,105,113,114,115,116,117,118,120,121,122,123,124,125,126,127,128,129,136,138,139,140,142,143,145,149,151,],[-43,-47,-51,-56,-89,-90,-91,-44,-45,-46,-48,-49,-52,-53,-57,-67,-86,-102,-50,130,-93,-73,-74,137,-97,-99,-102,-58,-46,-68,-70,-72,-50,-87,-54,-59,-71,-69,-75,-76,-77,-88,-92,-96,-10,147,-12,130,-94,-98,-55,-11,]),'right_parenthesis':([25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,46,61,95,96,97,102,103,104,105,113,114,115,116,117,118,120,121,122,123,124,125,126,127,128,129,136,138,139,140,142,143,145,149,151,],[-43,-47,-51,-56,-89,-90,-91,-44,-45,-46,-48,-49,-52,-53,-57,-67,-86,-102,-50,-93,-73,-74,136,-97,-99,-102,-58,-46,-68,-70,-72,-50,-87,-54,-59,-71,-69,-75,-76,-77,-88,-92,-96,-10,146,-12,149,-94,-98,-55,-11,]),'plus':([25,27,32,33,34,37,38,39,41,59,60,61,113,114,115,116,120,121,122,123,124,126,127,128,149,],[71,88,-44,-45,-46,-52,-53,71,93,71,71,-46,-58,-46,71,71,-87,-54,-59,71,71,71,71,-88,-55,]),'minus':([25,32,33,34,39,59,60,61,113,114,115,116,122,123,124,126,127,],[72,-44,-45,-46,72,72,72,-46,-58,-46,72,72,-59,72,72,72,72,]),'product':([25,32,33,34,39,59,60,61,113,114,115,116,122,123,124,126,127,],[73,-44,-45,-46,73,73,73,-46,-58,-46,73,73,-59,73,73,73,73,]),'division':([25,32,33,34,39,59,60,61,113,114,115,116,122,123,124,126,127,],[74,-44,-45,-46,74,74,74,-46,-58,-46,74,74,-59,74,74,74,74,]),'integer_division':([25,32,33,34,39,59,60,61,113,114,115,116,122,123,124,126,127,],[75,-44,-45,-46,75,75,75,-46,-58,-46,75,75,-59,75,75,75,75,]),'module':([25,27,32,33,34,37,38,39,59,60,61,113,114,115,116,120,121,122,123,124,126,127,128,149,],[76,87,-44,-45,-46,-52,-53,76,76,76,-46,-58,-46,76,76,87,-54,-59,76,76,76,76,87,-55,]),'power':([25,32,33,34,39,59,60,61,113,114,115,116,122,123,124,126,127,],[77,-44,-45,-46,77,77,77,-46,-58,-46,77,77,-59,77,77,77,77,]),'equals':([25,32,33,34,35,36,39,40,57,59,60,61,62,66,96,97,113,114,115,116,117,118,122,123,124,125,126,127,],[78,-44,-45,-46,-48,-49,78,78,78,78,78,-46,78,78,-73,78,-58,-46,-68,-70,-72,-50,-59,-71,-69,-75,-76,-77,]),'non_equal':([25,32,33,34,35,36,39,40,57,59,60,61,62,66,96,97,113,114,115,116,117,118,122,123,124,125,126,127,],[79,-44,-45,-46,-48,-49,79,79,79,79,79,-46,79,79,-73,79,-58,-46,-68,-70,-72,-50,-59,-71,-69,-75,-76,-77,]),'less':([25,32,33,34,35,36,39,40,57,59,60,61,62,66,96,97,113,114,115,116,117,118,122,123,124,125,126,127,],[80,-44,-45,-46,-48,-49,80,80,80,80,80,-46,80,80,-73,80,-58,-46,-68,-70,-72,-50,-59,-71,-69,-75,-76,-77,]),'greater':([25,32,33,34,35,36,39,40,57,59,60,61,62,66,96,97,113,114,115,116,117,118,122,123,124,125,126,127,],[81,-44,-45,-46,-48,-49,81,81,81,81,81,-46,81,81,-73,81,-58,-46,-68,-70,-72,-50,-59,-71,-69,-75,-76,-77,]),'less_equal':([25,32,33,34,35,36,39,40,57,59,60,61,62,66,96,97,113,114,115,116,117,118,122,123,124,125,126,127,],[82,-44,-45,-46,-48,-49,82,82,82,82,82,-46,82,82,-73,82,-58,-46,-68,-70,-72,-50,-59,-71,-69,-75,-76,-77,]),'greater_equal':([25,32,33,34,35,36,39,40,57,59,60,61,62,66,96,97,113,114,115,116,117,118,122,123,124,125,126,127,],[83,-44,-45,-46,-48,-49,83,83,83,83,83,-46,83,83,-73,83,-58,-46,-68,-70,-72,-50,-59,-71,-69,-75,-76,-77,]),'and':([26,32,33,34,35,36,40,57,58,61,62,63,66,67,96,97,113,114,115,116,117,118,122,123,124,125,126,127,],[85,-44,-45,-50,-48,-49,85,85,85,-50,85,85,85,85,-73,-74,-58,-46,-68,-70,-72,-50,-59,-71,-69,-75,-76,-77,]),'or':([26,32,33,34,35,36,40,57,58,61,62,63,66,67,96,97,113,114,115,116,117,118,122,123,124,125,126,127,],[86,-44,-45,-50,-48,-49,86,86,86,-50,86,86,86,86,-73,-74,-58,-46,-68,-70,-72,-50,-59,-71,-69,-75,-76,-77,]),'in':([65,],[110,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([0,],[2,]),'statement':([0,2,100,],[3,21,134,]),'empty':([0,2,46,100,105,],[4,22,104,22,140,]),'block_statement':([0,2,100,],[5,5,5,]),'assign_value':([0,2,100,],[6,6,6,]),'function_call':([0,2,8,42,45,46,100,119,130,137,],[7,7,30,30,30,30,7,30,30,30,]),'header':([0,2,100,],[10,10,10,]),'defined_function':([0,2,100,],[12,12,12,]),'conditional_statement':([0,2,100,],[13,13,13,]),'repetitive_statement':([0,2,100,],[14,14,14,]),'value':([8,42,45,46,119,130,137,],[24,95,101,103,95,143,145,]),'number':([8,16,17,20,42,43,45,46,69,70,89,90,92,119,130,137,],[25,59,59,59,25,59,25,25,113,115,122,124,126,25,25,25,]),'boolean':([8,16,17,20,42,43,45,46,84,91,119,130,137,],[26,58,63,67,26,96,26,26,117,125,26,26,26,]),'text':([8,42,45,46,88,93,119,130,137,],[27,27,27,27,120,128,27,27,27,]),'expression':([8,42,45,46,119,130,137,],[28,28,28,28,28,28,28,]),'list':([8,42,45,46,119,130,137,],[29,29,29,29,29,29,29,]),'formatted_string':([8,42,45,46,88,93,119,130,137,],[38,38,38,38,38,38,38,38,38,]),'arithmetic_expression':([8,16,17,20,42,43,45,46,70,90,92,119,130,137,],[39,60,60,60,39,60,39,39,116,123,127,39,39,39,]),'boolean_expression':([8,16,17,20,42,43,45,46,119,130,137,],[40,57,62,66,40,97,40,40,40,40,40,]),'string_concatenation':([8,42,45,46,119,130,137,],[41,41,41,41,41,41,41,]),'assign_operator':([11,],[45,]),'update':([11,],[48,]),'arithmetic_operator':([25,39,59,60,115,116,123,124,126,127,],[69,89,69,89,69,89,89,69,69,89,]),'relational_operator':([25,39,40,57,59,60,62,66,97,],[70,90,92,92,70,90,92,92,92,]),'boolean_operator':([26,40,57,58,62,63,66,67,96,97,],[84,91,91,84,91,84,91,84,84,91,]),'element':([42,119,],[94,142,]),'inner_statement_list':([44,],[98,]),'inner_statement':([44,98,100,],[99,132,135,]),'argument':([46,],[102,]),'parameter':([105,],[139,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','syntax.py',23),
  ('statement -> block_statement','statement',1,'p_statement1','syntax.py',28),
  ('block_statement -> header newline inner_statement_list backspace','block_statement',4,'p_block_statement1','syntax.py',33),
  ('block_statement -> header newline inner_statement_list','block_statement',3,'p_block_statement2','syntax.py',38),
  ('block_statement -> empty','block_statement',1,'p_empty_block','syntax.py',43),
  ('header -> defined_function','header',1,'p_header1','syntax.py',48),
  ('header -> conditional_statement','header',1,'p_header2','syntax.py',53),
  ('header -> repetitive_statement','header',1,'p_header3','syntax.py',58),
  ('defined_function -> def identifier left_parenthesis parameter right_parenthesis colon','defined_function',6,'p_defined_function','syntax.py',63),
  ('parameter -> identifier','parameter',1,'p_parameter1','syntax.py',68),
  ('parameter -> parameter comma identifier','parameter',3,'p_parameter2','syntax.py',73),
  ('parameter -> empty','parameter',1,'p_parameter3','syntax.py',78),
  ('conditional_statement -> if boolean_expression colon','conditional_statement',3,'p_conditional_statement1','syntax.py',83),
  ('conditional_statement -> if boolean colon','conditional_statement',3,'p_conditional_statement2','syntax.py',88),
  ('conditional_statement -> elif boolean_expression colon','conditional_statement',3,'p_conditional_statement3','syntax.py',93),
  ('conditional_statement -> elif boolean colon','conditional_statement',3,'p_conditional_statement4','syntax.py',98),
  ('conditional_statement -> else colon','conditional_statement',2,'p_conditional_statement5','syntax.py',103),
  ('repetitive_statement -> for identifier in identifier colon','repetitive_statement',5,'p_repetitive_statement1','syntax.py',108),
  ('repetitive_statement -> while boolean_expression colon','repetitive_statement',3,'p_repetitive_statement2','syntax.py',113),
  ('repetitive_statement -> while boolean colon','repetitive_statement',3,'p_repetitive_statement3','syntax.py',118),
  ('inner_statement_list -> inner_statement newline','inner_statement_list',2,'p_inner_statement_list1','syntax.py',123),
  ('inner_statement_list -> inner_statement','inner_statement_list',1,'p_inner_statement_list2','syntax.py',128),
  ('inner_statement_list -> inner_statement_list inner_statement newline','inner_statement_list',3,'p_inner_statement_list3','syntax.py',133),
  ('inner_statement_list -> inner_statement_list inner_statement','inner_statement_list',2,'p_inner_statement_list4','syntax.py',138),
  ('inner_statement -> identation statement','inner_statement',2,'p_inner_statement1','syntax.py',143),
  ('inner_statement -> identation inner_statement','inner_statement',2,'p_inner_statement2','syntax.py',148),
  ('statement_list -> statement newline','statement_list',2,'p_statement_list1','syntax.py',153),
  ('statement_list -> statement','statement_list',1,'p_statement_list2','syntax.py',158),
  ('statement_list -> statement_list statement newline','statement_list',3,'p_statement_list3','syntax.py',163),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list4','syntax.py',168),
  ('statement_list -> empty','statement_list',1,'p_empty_statement_list','syntax.py',173),
  ('statement -> assign_value','statement',1,'p_statement2','syntax.py',178),
  ('assign_value -> identifier assign_operator value','assign_value',3,'p_assign_value','syntax.py',183),
  ('assign_operator -> assign','assign_operator',1,'p_assign_operator1','syntax.py',188),
  ('assign_operator -> update','assign_operator',1,'p_assign_operator2','syntax.py',193),
  ('update -> increment','update',1,'p_update1','syntax.py',198),
  ('update -> decrement','update',1,'p_update2','syntax.py',203),
  ('update -> self_product','update',1,'p_update3','syntax.py',208),
  ('update -> self_division','update',1,'p_update4','syntax.py',213),
  ('update -> self_integer_division','update',1,'p_update5','syntax.py',218),
  ('update -> self_module','update',1,'p_update6','syntax.py',223),
  ('update -> self_power','update',1,'p_update7','syntax.py',228),
  ('value -> number','value',1,'p_value1','syntax.py',233),
  ('number -> float','number',1,'p_number1','syntax.py',238),
  ('number -> integer','number',1,'p_number2','syntax.py',243),
  ('number -> identifier','number',1,'p_number3','syntax.py',248),
  ('value -> boolean','value',1,'p_value2','syntax.py',253),
  ('boolean -> True','boolean',1,'p_boolean1','syntax.py',258),
  ('boolean -> False','boolean',1,'p_boolean2','syntax.py',263),
  ('boolean -> identifier','boolean',1,'p_boolean3','syntax.py',268),
  ('value -> text','value',1,'p_value3','syntax.py',273),
  ('text -> string','text',1,'p_text1','syntax.py',278),
  ('text -> formatted_string','text',1,'p_text2','syntax.py',283),
  ('text -> identifier','text',1,'p_text3','syntax.py',288),
  ('formatted_string -> text module left_parenthesis element right_parenthesis','formatted_string',5,'p_formatted_string','syntax.py',293),
  ('value -> expression','value',1,'p_value4','syntax.py',298),
  ('expression -> arithmetic_expression','expression',1,'p_expression1','syntax.py',303),
  ('arithmetic_expression -> number arithmetic_operator number','arithmetic_expression',3,'p_arithmetic_expression1','syntax.py',308),
  ('arithmetic_expression -> arithmetic_expression arithmetic_operator number','arithmetic_expression',3,'p_arithmetic_expression2','syntax.py',313),
  ('arithmetic_operator -> plus','arithmetic_operator',1,'p_arithmetic_operator1','syntax.py',318),
  ('arithmetic_operator -> minus','arithmetic_operator',1,'p_arithmetic_operator2','syntax.py',323),
  ('arithmetic_operator -> product','arithmetic_operator',1,'p_arithmetic_operator3','syntax.py',328),
  ('arithmetic_operator -> division','arithmetic_operator',1,'p_arithmetic_operator4','syntax.py',333),
  ('arithmetic_operator -> integer_division','arithmetic_operator',1,'p_arithmetic_operator5','syntax.py',338),
  ('arithmetic_operator -> module','arithmetic_operator',1,'p_arithmetic_operator6','syntax.py',343),
  ('arithmetic_operator -> power','arithmetic_operator',1,'p_arithmetic_operator7','syntax.py',348),
  ('expression -> boolean_expression','expression',1,'p_expression2','syntax.py',353),
  ('boolean_expression -> number relational_operator number','boolean_expression',3,'p_boolean_expression1','syntax.py',358),
  ('boolean_expression -> arithmetic_expression relational_operator number','boolean_expression',3,'p_boolean_expression2','syntax.py',363),
  ('boolean_expression -> number relational_operator arithmetic_expression','boolean_expression',3,'p_boolean_expression3','syntax.py',368),
  ('boolean_expression -> arithmetic_expression relational_operator arithmetic_expression','boolean_expression',3,'p_boolean_expression4','syntax.py',373),
  ('boolean_expression -> boolean boolean_operator boolean','boolean_expression',3,'p_boolean_expression5','syntax.py',378),
  ('boolean_expression -> not boolean','boolean_expression',2,'p_boolean_expression6','syntax.py',383),
  ('boolean_expression -> not boolean_expression','boolean_expression',2,'p_boolean_expression7','syntax.py',388),
  ('boolean_expression -> boolean_expression boolean_operator boolean','boolean_expression',3,'p_boolean_expression8','syntax.py',393),
  ('boolean_expression -> boolean_expression relational_operator number','boolean_expression',3,'p_boolean_expression9','syntax.py',398),
  ('boolean_expression -> boolean_expression relational_operator arithmetic_expression','boolean_expression',3,'p_boolean_expression10','syntax.py',403),
  ('relational_operator -> equals','relational_operator',1,'p_relational_operator1','syntax.py',408),
  ('relational_operator -> non_equal','relational_operator',1,'p_relational_operator2','syntax.py',413),
  ('relational_operator -> less','relational_operator',1,'p_relational_operator3','syntax.py',418),
  ('relational_operator -> greater','relational_operator',1,'p_relational_operator4','syntax.py',423),
  ('relational_operator -> less_equal','relational_operator',1,'p_relational_operator5','syntax.py',428),
  ('relational_operator -> greater_equal','relational_operator',1,'p_relational_operator6','syntax.py',433),
  ('boolean_operator -> and','boolean_operator',1,'p_boolean_operator1','syntax.py',438),
  ('boolean_operator -> or','boolean_operator',1,'p_boolean_operator2','syntax.py',443),
  ('expression -> string_concatenation','expression',1,'p_expression_3','syntax.py',448),
  ('string_concatenation -> text plus text','string_concatenation',3,'p_string_concatenation1','syntax.py',453),
  ('string_concatenation -> string_concatenation plus text','string_concatenation',3,'p_string_concatenation2','syntax.py',458),
  ('value -> list','value',1,'p_value5','syntax.py',463),
  ('value -> function_call','value',1,'p_value6','syntax.py',468),
  ('value -> None','value',1,'p_value7','syntax.py',473),
  ('list -> left_bracket element right_bracket','list',3,'p_list','syntax.py',478),
  ('element -> value','element',1,'p_element1','syntax.py',483),
  ('element -> element comma value','element',3,'p_element2','syntax.py',488),
  ('statement -> function_call','statement',1,'p_statement4','syntax.py',493),
  ('function_call -> identifier left_parenthesis argument right_parenthesis','function_call',4,'p_function_call','syntax.py',498),
  ('argument -> value','argument',1,'p_argument1','syntax.py',503),
  ('argument -> argument comma value','argument',3,'p_argument2','syntax.py',508),
  ('argument -> empty','argument',1,'p_argument3','syntax.py',513),
  ('statement -> return value','statement',2,'p_statement5','syntax.py',518),
  ('statement -> break','statement',1,'p_statement6','syntax.py',523),
  ('empty -> <empty>','empty',0,'p_empty','syntax.py',528),
]
